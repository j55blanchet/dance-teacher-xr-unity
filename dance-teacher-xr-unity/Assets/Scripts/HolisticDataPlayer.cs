using System;
using System.Collections;
using System.Collections.Generic;
using System.Net.WebSockets;
using Unity.VisualScripting;
using UnityEngine;

public enum HolisticPoseJoint
{
    //frame,NOSE_x,NOSE_y,NOSE_z,NOSE_vis,LEFT_EYE_INNER_x,LEFT_EYE_INNER_y,LEFT_EYE_INNER_z,LEFT_EYE_INNER_vis,LEFT_EYE_x,LEFT_EYE_y,LEFT_EYE_z,LEFT_EYE_vis,LEFT_EYE_OUTER_x,LEFT_EYE_OUTER_y,LEFT_EYE_OUTER_z,LEFT_EYE_OUTER_vis,RIGHT_EYE_INNER_x,RIGHT_EYE_INNER_y,RIGHT_EYE_INNER_z,RIGHT_EYE_INNER_vis,RIGHT_EYE_x,RIGHT_EYE_y,RIGHT_EYE_z,RIGHT_EYE_vis,RIGHT_EYE_OUTER_x,RIGHT_EYE_OUTER_y,RIGHT_EYE_OUTER_z,RIGHT_EYE_OUTER_vis,LEFT_EAR_x,LEFT_EAR_y,LEFT_EAR_z,LEFT_EAR_vis,RIGHT_EAR_x,RIGHT_EAR_y,RIGHT_EAR_z,RIGHT_EAR_vis,MOUTH_LEFT_x,MOUTH_LEFT_y,MOUTH_LEFT_z,MOUTH_LEFT_vis,MOUTH_RIGHT_x,MOUTH_RIGHT_y,MOUTH_RIGHT_z,MOUTH_RIGHT_vis,LEFT_SHOULDER_x,LEFT_SHOULDER_y,LEFT_SHOULDER_z,LEFT_SHOULDER_vis,RIGHT_SHOULDER_x,RIGHT_SHOULDER_y,RIGHT_SHOULDER_z,RIGHT_SHOULDER_vis,LEFT_ELBOW_x,LEFT_ELBOW_y,LEFT_ELBOW_z,LEFT_ELBOW_vis,RIGHT_ELBOW_x,RIGHT_ELBOW_y,RIGHT_ELBOW_z,RIGHT_ELBOW_vis,LEFT_WRIST_x,LEFT_WRIST_y,LEFT_WRIST_z,LEFT_WRIST_vis,RIGHT_WRIST_x,RIGHT_WRIST_y,RIGHT_WRIST_z,RIGHT_WRIST_vis,LEFT_PINKY_x,LEFT_PINKY_y,LEFT_PINKY_z,LEFT_PINKY_vis,RIGHT_PINKY_x,RIGHT_PINKY_y,RIGHT_PINKY_z,RIGHT_PINKY_vis,LEFT_INDEX_x,LEFT_INDEX_y,LEFT_INDEX_z,LEFT_INDEX_vis,RIGHT_INDEX_x,RIGHT_INDEX_y,RIGHT_INDEX_z,RIGHT_INDEX_vis,LEFT_THUMB_x,LEFT_THUMB_y,LEFT_THUMB_z,LEFT_THUMB_vis,RIGHT_THUMB_x,RIGHT_THUMB_y,RIGHT_THUMB_z,RIGHT_THUMB_vis,LEFT_HIP_x,LEFT_HIP_y,LEFT_HIP_z,LEFT_HIP_vis,RIGHT_HIP_x,RIGHT_HIP_y,RIGHT_HIP_z,RIGHT_HIP_vis,LEFT_KNEE_x,LEFT_KNEE_y,LEFT_KNEE_z,LEFT_KNEE_vis,RIGHT_KNEE_x,RIGHT_KNEE_y,RIGHT_KNEE_z,RIGHT_KNEE_vis,LEFT_ANKLE_x,LEFT_ANKLE_y,LEFT_ANKLE_z,LEFT_ANKLE_vis,RIGHT_ANKLE_x,RIGHT_ANKLE_y,RIGHT_ANKLE_z,RIGHT_ANKLE_vis,LEFT_HEEL_x,LEFT_HEEL_y,LEFT_HEEL_z,LEFT_HEEL_vis,RIGHT_HEEL_x,RIGHT_HEEL_y,RIGHT_HEEL_z,RIGHT_HEEL_vis,LEFT_FOOT_INDEX_x,LEFT_FOOT_INDEX_y,LEFT_FOOT_INDEX_z,LEFT_FOOT_INDEX_vis,RIGHT_FOOT_INDEX_x,RIGHT_FOOT_INDEX_y,RIGHT_FOOT_INDEX_z,RIGHT_FOOT_INDEX_vis,LEFTHAND_WRIST_x,LEFTHAND_WRIST_y,LEFTHAND_WRIST_z,LEFTHAND_THUMB_CMC_x,LEFTHAND_THUMB_CMC_y,LEFTHAND_THUMB_CMC_z,LEFTHAND_THUMB_MCP_x,LEFTHAND_THUMB_MCP_y,LEFTHAND_THUMB_MCP_z,LEFTHAND_THUMB_IP_x,LEFTHAND_THUMB_IP_y,LEFTHAND_THUMB_IP_z,LEFTHAND_THUMB_TIP_x,LEFTHAND_THUMB_TIP_y,LEFTHAND_THUMB_TIP_z,LEFTHAND_INDEX_FINGER_MCP_x,LEFTHAND_INDEX_FINGER_MCP_y,LEFTHAND_INDEX_FINGER_MCP_z,LEFTHAND_INDEX_FINGER_PIP_x,LEFTHAND_INDEX_FINGER_PIP_y,LEFTHAND_INDEX_FINGER_PIP_z,LEFTHAND_INDEX_FINGER_DIP_x,LEFTHAND_INDEX_FINGER_DIP_y,LEFTHAND_INDEX_FINGER_DIP_z,LEFTHAND_INDEX_FINGER_TIP_x,LEFTHAND_INDEX_FINGER_TIP_y,LEFTHAND_INDEX_FINGER_TIP_z,LEFTHAND_MIDDLE_FINGER_MCP_x,LEFTHAND_MIDDLE_FINGER_MCP_y,LEFTHAND_MIDDLE_FINGER_MCP_z,LEFTHAND_MIDDLE_FINGER_PIP_x,LEFTHAND_MIDDLE_FINGER_PIP_y,LEFTHAND_MIDDLE_FINGER_PIP_z,LEFTHAND_MIDDLE_FINGER_DIP_x,LEFTHAND_MIDDLE_FINGER_DIP_y,LEFTHAND_MIDDLE_FINGER_DIP_z,LEFTHAND_MIDDLE_FINGER_TIP_x,LEFTHAND_MIDDLE_FINGER_TIP_y,LEFTHAND_MIDDLE_FINGER_TIP_z,LEFTHAND_RING_FINGER_MCP_x,LEFTHAND_RING_FINGER_MCP_y,LEFTHAND_RING_FINGER_MCP_z,LEFTHAND_RING_FINGER_PIP_x,LEFTHAND_RING_FINGER_PIP_y,LEFTHAND_RING_FINGER_PIP_z,LEFTHAND_RING_FINGER_DIP_x,LEFTHAND_RING_FINGER_DIP_y,LEFTHAND_RING_FINGER_DIP_z,LEFTHAND_RING_FINGER_TIP_x,LEFTHAND_RING_FINGER_TIP_y,LEFTHAND_RING_FINGER_TIP_z,LEFTHAND_PINKY_MCP_x,LEFTHAND_PINKY_MCP_y,LEFTHAND_PINKY_MCP_z,LEFTHAND_PINKY_PIP_x,LEFTHAND_PINKY_PIP_y,LEFTHAND_PINKY_PIP_z,LEFTHAND_PINKY_DIP_x,LEFTHAND_PINKY_DIP_y,LEFTHAND_PINKY_DIP_z,LEFTHAND_PINKY_TIP_x,LEFTHAND_PINKY_TIP_y,LEFTHAND_PINKY_TIP_z,RIGHTHAND_WRIST_x,RIGHTHAND_WRIST_y,RIGHTHAND_WRIST_z,RIGHTHAND_THUMB_CMC_x,RIGHTHAND_THUMB_CMC_y,RIGHTHAND_THUMB_CMC_z,RIGHTHAND_THUMB_MCP_x,RIGHTHAND_THUMB_MCP_y,RIGHTHAND_THUMB_MCP_z,RIGHTHAND_THUMB_IP_x,RIGHTHAND_THUMB_IP_y,RIGHTHAND_THUMB_IP_z,RIGHTHAND_THUMB_TIP_x,RIGHTHAND_THUMB_TIP_y,RIGHTHAND_THUMB_TIP_z,RIGHTHAND_INDEX_FINGER_MCP_x,RIGHTHAND_INDEX_FINGER_MCP_y,RIGHTHAND_INDEX_FINGER_MCP_z,RIGHTHAND_INDEX_FINGER_PIP_x,RIGHTHAND_INDEX_FINGER_PIP_y,RIGHTHAND_INDEX_FINGER_PIP_z,RIGHTHAND_INDEX_FINGER_DIP_x,RIGHTHAND_INDEX_FINGER_DIP_y,RIGHTHAND_INDEX_FINGER_DIP_z,RIGHTHAND_INDEX_FINGER_TIP_x,RIGHTHAND_INDEX_FINGER_TIP_y,RIGHTHAND_INDEX_FINGER_TIP_z,RIGHTHAND_MIDDLE_FINGER_MCP_x,RIGHTHAND_MIDDLE_FINGER_MCP_y,RIGHTHAND_MIDDLE_FINGER_MCP_z,RIGHTHAND_MIDDLE_FINGER_PIP_x,RIGHTHAND_MIDDLE_FINGER_PIP_y,RIGHTHAND_MIDDLE_FINGER_PIP_z,RIGHTHAND_MIDDLE_FINGER_DIP_x,RIGHTHAND_MIDDLE_FINGER_DIP_y,RIGHTHAND_MIDDLE_FINGER_DIP_z,RIGHTHAND_MIDDLE_FINGER_TIP_x,RIGHTHAND_MIDDLE_FINGER_TIP_y,RIGHTHAND_MIDDLE_FINGER_TIP_z,RIGHTHAND_RING_FINGER_MCP_x,RIGHTHAND_RING_FINGER_MCP_y,RIGHTHAND_RING_FINGER_MCP_z,RIGHTHAND_RING_FINGER_PIP_x,RIGHTHAND_RING_FINGER_PIP_y,RIGHTHAND_RING_FINGER_PIP_z,RIGHTHAND_RING_FINGER_DIP_x,RIGHTHAND_RING_FINGER_DIP_y,RIGHTHAND_RING_FINGER_DIP_z,RIGHTHAND_RING_FINGER_TIP_x,RIGHTHAND_RING_FINGER_TIP_y,RIGHTHAND_RING_FINGER_TIP_z,RIGHTHAND_PINKY_MCP_x,RIGHTHAND_PINKY_MCP_y,RIGHTHAND_PINKY_MCP_z,RIGHTHAND_PINKY_PIP_x,RIGHTHAND_PINKY_PIP_y,RIGHTHAND_PINKY_PIP_z,RIGHTHAND_PINKY_DIP_x,RIGHTHAND_PINKY_DIP_y,RIGHTHAND_PINKY_DIP_z,RIGHTHAND_PINKY_TIP_x,RIGHTHAND_PINKY_TIP_y,RIGHTHAND_PINKY_TIP_z
    NOSE,
    LEFT_EYE_INNER,
    LEFT_EYE,
    LEFT_EYE_OUTER,
    RIGHT_EYE_INNER,
    RIGHT_EYE,
    RIGHT_EYE_OUTER,
    LEFT_EAR,
    RIGHT_EAR,
    MOUTH_LEFT,
    MOUTH_RIGHT,
    LEFT_SHOULDER,
    RIGHT_SHOULDER,
    LEFT_ELBOW,
    RIGHT_ELBOW,
    LEFT_WRIST,
    RIGHT_WRIST,
    LEFT_PINKY,
    RIGHT_PINKY,
    LEFT_INDEX,
    RIGHT_INDEX,
    LEFT_THUMB,
    RIGHT_THUMB,
    LEFT_HIP,
    RIGHT_HIP,
    LEFT_KNEE,
    RIGHT_KNEE,
    LEFT_ANKLE,
    RIGHT_ANKLE,
    LEFT_HEEL,
    RIGHT_HEEL,
    LEFT_FOOT_INDEX,
    RIGHT_FOOT_INDEX,
}


public class HolisticDataPlayer : MonoBehaviour
{
    public TextAsset holisticDataFile;
    Animator animator;

    // cols: frame,NOSE_x,NOSE_y,NOSE_z,NOSE_vis,LEFT_EYE_INNER_x,LEFT_EYE_INNER_y,LEFT_EYE_INNER_z,LEFT_EYE_INNER_vis,LEFT_EYE_x,LEFT_EYE_y,LEFT_EYE_z,LEFT_EYE_vis,LEFT_EYE_OUTER_x,LEFT_EYE_OUTER_y,LEFT_EYE_OUTER_z,LEFT_EYE_OUTER_vis,RIGHT_EYE_INNER_x,RIGHT_EYE_INNER_y,RIGHT_EYE_INNER_z,RIGHT_EYE_INNER_vis,RIGHT_EYE_x,RIGHT_EYE_y,RIGHT_EYE_z,RIGHT_EYE_vis,RIGHT_EYE_OUTER_x,RIGHT_EYE_OUTER_y,RIGHT_EYE_OUTER_z,RIGHT_EYE_OUTER_vis,LEFT_EAR_x,LEFT_EAR_y,LEFT_EAR_z,LEFT_EAR_vis,RIGHT_EAR_x,RIGHT_EAR_y,RIGHT_EAR_z,RIGHT_EAR_vis,MOUTH_LEFT_x,MOUTH_LEFT_y,MOUTH_LEFT_z,MOUTH_LEFT_vis,MOUTH_RIGHT_x,MOUTH_RIGHT_y,MOUTH_RIGHT_z,MOUTH_RIGHT_vis,LEFT_SHOULDER_x,LEFT_SHOULDER_y,LEFT_SHOULDER_z,LEFT_SHOULDER_vis,RIGHT_SHOULDER_x,RIGHT_SHOULDER_y,RIGHT_SHOULDER_z,RIGHT_SHOULDER_vis,LEFT_ELBOW_x,LEFT_ELBOW_y,LEFT_ELBOW_z,LEFT_ELBOW_vis,RIGHT_ELBOW_x,RIGHT_ELBOW_y,RIGHT_ELBOW_z,RIGHT_ELBOW_vis,LEFT_WRIST_x,LEFT_WRIST_y,LEFT_WRIST_z,LEFT_WRIST_vis,RIGHT_WRIST_x,RIGHT_WRIST_y,RIGHT_WRIST_z,RIGHT_WRIST_vis,LEFT_PINKY_x,LEFT_PINKY_y,LEFT_PINKY_z,LEFT_PINKY_vis,RIGHT_PINKY_x,RIGHT_PINKY_y,RIGHT_PINKY_z,RIGHT_PINKY_vis,LEFT_INDEX_x,LEFT_INDEX_y,LEFT_INDEX_z,LEFT_INDEX_vis,RIGHT_INDEX_x,RIGHT_INDEX_y,RIGHT_INDEX_z,RIGHT_INDEX_vis,LEFT_THUMB_x,LEFT_THUMB_y,LEFT_THUMB_z,LEFT_THUMB_vis,RIGHT_THUMB_x,RIGHT_THUMB_y,RIGHT_THUMB_z,RIGHT_THUMB_vis,LEFT_HIP_x,LEFT_HIP_y,LEFT_HIP_z,LEFT_HIP_vis,RIGHT_HIP_x,RIGHT_HIP_y,RIGHT_HIP_z,RIGHT_HIP_vis,LEFT_KNEE_x,LEFT_KNEE_y,LEFT_KNEE_z,LEFT_KNEE_vis,RIGHT_KNEE_x,RIGHT_KNEE_y,RIGHT_KNEE_z,RIGHT_KNEE_vis,LEFT_ANKLE_x,LEFT_ANKLE_y,LEFT_ANKLE_z,LEFT_ANKLE_vis,RIGHT_ANKLE_x,RIGHT_ANKLE_y,RIGHT_ANKLE_z,RIGHT_ANKLE_vis,LEFT_HEEL_x,LEFT_HEEL_y,LEFT_HEEL_z,LEFT_HEEL_vis,RIGHT_HEEL_x,RIGHT_HEEL_y,RIGHT_HEEL_z,RIGHT_HEEL_vis,LEFT_FOOT_INDEX_x,LEFT_FOOT_INDEX_y,LEFT_FOOT_INDEX_z,LEFT_FOOT_INDEX_vis,RIGHT_FOOT_INDEX_x,RIGHT_FOOT_INDEX_y,RIGHT_FOOT_INDEX_z,RIGHT_FOOT_INDEX_vis,LEFTHAND_WRIST_x,LEFTHAND_WRIST_y,LEFTHAND_WRIST_z,LEFTHAND_THUMB_CMC_x,LEFTHAND_THUMB_CMC_y,LEFTHAND_THUMB_CMC_z,LEFTHAND_THUMB_MCP_x,LEFTHAND_THUMB_MCP_y,LEFTHAND_THUMB_MCP_z,LEFTHAND_THUMB_IP_x,LEFTHAND_THUMB_IP_y,LEFTHAND_THUMB_IP_z,LEFTHAND_THUMB_TIP_x,LEFTHAND_THUMB_TIP_y,LEFTHAND_THUMB_TIP_z,LEFTHAND_INDEX_FINGER_MCP_x,LEFTHAND_INDEX_FINGER_MCP_y,LEFTHAND_INDEX_FINGER_MCP_z,LEFTHAND_INDEX_FINGER_PIP_x,LEFTHAND_INDEX_FINGER_PIP_y,LEFTHAND_INDEX_FINGER_PIP_z,LEFTHAND_INDEX_FINGER_DIP_x,LEFTHAND_INDEX_FINGER_DIP_y,LEFTHAND_INDEX_FINGER_DIP_z,LEFTHAND_INDEX_FINGER_TIP_x,LEFTHAND_INDEX_FINGER_TIP_y,LEFTHAND_INDEX_FINGER_TIP_z,LEFTHAND_MIDDLE_FINGER_MCP_x,LEFTHAND_MIDDLE_FINGER_MCP_y,LEFTHAND_MIDDLE_FINGER_MCP_z,LEFTHAND_MIDDLE_FINGER_PIP_x,LEFTHAND_MIDDLE_FINGER_PIP_y,LEFTHAND_MIDDLE_FINGER_PIP_z,LEFTHAND_MIDDLE_FINGER_DIP_x,LEFTHAND_MIDDLE_FINGER_DIP_y,LEFTHAND_MIDDLE_FINGER_DIP_z,LEFTHAND_MIDDLE_FINGER_TIP_x,LEFTHAND_MIDDLE_FINGER_TIP_y,LEFTHAND_MIDDLE_FINGER_TIP_z,LEFTHAND_RING_FINGER_MCP_x,LEFTHAND_RING_FINGER_MCP_y,LEFTHAND_RING_FINGER_MCP_z,LEFTHAND_RING_FINGER_PIP_x,LEFTHAND_RING_FINGER_PIP_y,LEFTHAND_RING_FINGER_PIP_z,LEFTHAND_RING_FINGER_DIP_x,LEFTHAND_RING_FINGER_DIP_y,LEFTHAND_RING_FINGER_DIP_z,LEFTHAND_RING_FINGER_TIP_x,LEFTHAND_RING_FINGER_TIP_y,LEFTHAND_RING_FINGER_TIP_z,LEFTHAND_PINKY_MCP_x,LEFTHAND_PINKY_MCP_y,LEFTHAND_PINKY_MCP_z,LEFTHAND_PINKY_PIP_x,LEFTHAND_PINKY_PIP_y,LEFTHAND_PINKY_PIP_z,LEFTHAND_PINKY_DIP_x,LEFTHAND_PINKY_DIP_y,LEFTHAND_PINKY_DIP_z,LEFTHAND_PINKY_TIP_x,LEFTHAND_PINKY_TIP_y,LEFTHAND_PINKY_TIP_z,RIGHTHAND_WRIST_x,RIGHTHAND_WRIST_y,RIGHTHAND_WRIST_z,RIGHTHAND_THUMB_CMC_x,RIGHTHAND_THUMB_CMC_y,RIGHTHAND_THUMB_CMC_z,RIGHTHAND_THUMB_MCP_x,RIGHTHAND_THUMB_MCP_y,RIGHTHAND_THUMB_MCP_z,RIGHTHAND_THUMB_IP_x,RIGHTHAND_THUMB_IP_y,RIGHTHAND_THUMB_IP_z,RIGHTHAND_THUMB_TIP_x,RIGHTHAND_THUMB_TIP_y,RIGHTHAND_THUMB_TIP_z,RIGHTHAND_INDEX_FINGER_MCP_x,RIGHTHAND_INDEX_FINGER_MCP_y,RIGHTHAND_INDEX_FINGER_MCP_z,RIGHTHAND_INDEX_FINGER_PIP_x,RIGHTHAND_INDEX_FINGER_PIP_y,RIGHTHAND_INDEX_FINGER_PIP_z,RIGHTHAND_INDEX_FINGER_DIP_x,RIGHTHAND_INDEX_FINGER_DIP_y,RIGHTHAND_INDEX_FINGER_DIP_z,RIGHTHAND_INDEX_FINGER_TIP_x,RIGHTHAND_INDEX_FINGER_TIP_y,RIGHTHAND_INDEX_FINGER_TIP_z,RIGHTHAND_MIDDLE_FINGER_MCP_x,RIGHTHAND_MIDDLE_FINGER_MCP_y,RIGHTHAND_MIDDLE_FINGER_MCP_z,RIGHTHAND_MIDDLE_FINGER_PIP_x,RIGHTHAND_MIDDLE_FINGER_PIP_y,RIGHTHAND_MIDDLE_FINGER_PIP_z,RIGHTHAND_MIDDLE_FINGER_DIP_x,RIGHTHAND_MIDDLE_FINGER_DIP_y,RIGHTHAND_MIDDLE_FINGER_DIP_z,RIGHTHAND_MIDDLE_FINGER_TIP_x,RIGHTHAND_MIDDLE_FINGER_TIP_y,RIGHTHAND_MIDDLE_FINGER_TIP_z,RIGHTHAND_RING_FINGER_MCP_x,RIGHTHAND_RING_FINGER_MCP_y,RIGHTHAND_RING_FINGER_MCP_z,RIGHTHAND_RING_FINGER_PIP_x,RIGHTHAND_RING_FINGER_PIP_y,RIGHTHAND_RING_FINGER_PIP_z,RIGHTHAND_RING_FINGER_DIP_x,RIGHTHAND_RING_FINGER_DIP_y,RIGHTHAND_RING_FINGER_DIP_z,RIGHTHAND_RING_FINGER_TIP_x,RIGHTHAND_RING_FINGER_TIP_y,RIGHTHAND_RING_FINGER_TIP_z,RIGHTHAND_PINKY_MCP_x,RIGHTHAND_PINKY_MCP_y,RIGHTHAND_PINKY_MCP_z,RIGHTHAND_PINKY_PIP_x,RIGHTHAND_PINKY_PIP_y,RIGHTHAND_PINKY_PIP_z,RIGHTHAND_PINKY_DIP_x,RIGHTHAND_PINKY_DIP_y,RIGHTHAND_PINKY_DIP_z,RIGHTHAND_PINKY_TIP_x,RIGHTHAND_PINKY_TIP_y,RIGHTHAND_PINKY_TIP_z
    Dictionary<string, float[]> holisticData;

    float animationStartTime = float.NaN;

    // Start is called before the first frame update
    void Start()
    {
        this.animator = GetComponent<Animator>();
        if (this.holisticDataFile != null) {
            this.holisticData = LoadHolisticCSV(this.holisticDataFile);
            this.animationStartTime = Time.time + 3;
        }
    }

    Vector3 GetJointPositionFromHolisticData(HolisticPoseJoint joint, int frameIndex)
    {
        var jointName = Enum.GetName(typeof(HolisticPoseJoint), joint);
        var x = holisticData[jointName + "_x"][frameIndex];
        var y = holisticData[jointName + "_y"][frameIndex];
        var z = holisticData[jointName + "_z"][frameIndex];
        return new Vector3(x, y, z);
    }

    void OnAnimatorIK(int layerIndex) {

        var fps = 30f;

        if (float.IsNaN(animationStartTime) || Time.time < animationStartTime) {
            return;
        }
        
        // Get the humanoid avatar                    
        var avatar = animator.avatar;
        // var avatarDefinition = avatar.humanDescription;

        var frameCount = 0;
        foreach (var key in holisticData.Keys) {
            if (frameCount != 0) {
                // Assert all frame counts are equal
                UnityEngine.Assertions.Assert.AreEqual(frameCount, holisticData[key].Length);
            }
            frameCount = holisticData[key].Length;
        }
        
        var humanPoseHandler = new HumanPoseHandler(avatar, transform);

        var frameIndex = (int)((Time.time - this.animationStartTime) * fps);
        frameIndex = Mathf.Min(frameIndex, frameCount - 1); // ensure we don't go out of bounds

        var humanPose = new HumanPose();
        humanPoseHandler.GetHumanPose(ref humanPose);

        
        var leftHipPosition = GetJointPositionFromHolisticData(HolisticPoseJoint.LEFT_HIP, frameIndex);
        var rightHipPosition = GetJointPositionFromHolisticData(HolisticPoseJoint.RIGHT_HIP, frameIndex);
        var rootPosition = (leftHipPosition + rightHipPosition) / 2f;

        humanPose.bodyPosition = rootPosition;
        
        var leftWristPosition = GetJointPositionFromHolisticData(HolisticPoseJoint.LEFT_WRIST, frameIndex);
        animator.SetIKPositionWeight(AvatarIKGoal.LeftHand, 1f);
        animator.SetIKPosition(AvatarIKGoal.LeftHand, leftWristPosition);

        var rightWristPosition = GetJointPositionFromHolisticData(HolisticPoseJoint.RIGHT_WRIST, frameIndex);
        animator.SetIKPositionWeight(AvatarIKGoal.RightHand, 1f);
        animator.SetIKPosition(AvatarIKGoal.RightHand, rightWristPosition);
    }

    public Dictionary<string, float[]> LoadHolisticCSV(TextAsset holisticFile)
    {
        string[] lines = holisticFile.text.Split('\n');

        // Store data by column
        string[] header = lines[0].Split(',');
        var frameCount = lines.Length - 1;
        var data = new Dictionary<string, float[]>();

        for (int i = 0; i < header.Length; i++)
        {
            data[header[i]] = new float[frameCount];
        }

        // Load the data into the arrays
        for (int i = 1; i < lines.Length; i++)
        {
            string[] line = lines[i].Split(',');

            for (int j = 0; j < line.Length; j++)
            {
                string cell = line[j];
                if (cell == "")
                {
                    continue;
                }
                bool couldParse = float.TryParse(cell, out float value);
                if (couldParse){
                    data[header[j]][i - 1] = value;    
                } else {
                    data[header[j]][i - 1] = 0f;
                }
            }
        }

        return data;
    }
}
